% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uwot.R
\name{tumap}
\alias{tumap}
\title{Dimensionality Reduction Using t-Distributed UMAP (t-UMAP)}
\usage{
tumap(X, n_neighbors = 15, n_components = 2, metric = "euclidean",
  n_epochs = NULL, alpha = 1, scale = FALSE, init = "spectral",
  set_op_mix_ratio = 1, local_connectivity = 1, bandwidth = 1,
  gamma = 1, negative_sample_rate = 5, nn_method = NULL,
  n_trees = 50, search_k = 2 * n_neighbors * n_trees,
  n_threads = max(1, RcppParallel::defaultNumThreads()/2),
  grain_size = 1, y = NULL, target_n_neighbors = n_neighbors,
  target_weight = 0.5, ret_model = FALSE, ret_nn = FALSE,
  verbose = getOption("verbose", TRUE))
}
\arguments{
\item{X}{Input data. Can be a \code{\link{data.frame}}, \code{\link{matrix}},
\code{\link[stats]{dist}} object or \code{\link[Matrix]{sparseMatrix}}.
A sparse matrix is interpreted as a distance matrix and both implicit and
explicit zero entries are ignored. Set zero distances you want to keep to
an arbitrarily small non-zero value (e.g. \code{1e-10}). Matrix and data
frames should contain one observation per row. Data frames will have any
non-numeric columns removed.}

\item{n_neighbors}{The size of local neighborhood (in terms of number of
neighboring sample points) used for manifold approximation. Larger values
result in more global views of the manifold, while smaller values result in
more local data being preserved. In general values should be in the range
\code{2} to \code{100}.}

\item{n_components}{The dimension of the space to embed into. This defaults
to \code{2} to provide easy visualization, but can reasonably be set to any
integer value in the range \code{2} to \code{100}.}

\item{metric}{Type of distance metric to use to find nearest neighbors. One
  of:
\itemize{
  \item \code{"euclidean"} (the default)
  \item \code{"cosine"}
  \item \code{"manhattan"}
}
Only applies if \code{nn_method = "annoy"} (for \code{nn_method = "fnn"}, the
distance metric is always "euclidean").}

\item{n_epochs}{Number of epochs to use during the optimization of the
embedded coordinates. By default, this value is set to \code{500} for datasets
containing 10,000 vertices or less, and \code{200} otherwise.}

\item{alpha}{Initial learning rate used in optimization of the coordinates.}

\item{scale}{Scaling to apply to \code{X} if it is a data frame or matrix:
\itemize{
  \item{\code{"none"} or \code{FALSE} or \code{NULL}} No scaling.
  \item{\code{"scale"} or \code{TRUE}} Scale each column to zero mean and variance 1.
  \item{\code{"maxabs"}} Center each column to mean 0, then divide each element by the
  maximum absolute value over the entire matrix.
  \item{\code{"range"}} Range scale the entire matrix, so the smallest element is 0 and
  the largest is 1.
}
For t-UMAP, the default is \code{"none"}.}

\item{init}{Type of initialization for the coordinates. Options are:
\itemize{
  \item \code{"spectral"} Spectral embedding using the normalized Laplacian
  of the fuzzy 1-skeleton, with Gaussian noise added.
  \item \code{"normlaplacian"}. Spectral embedding using the normalized
  Laplacian of the fuzzy 1-skeleton, without noise.
  \item \code{"random"}. Coordinates assigned using a uniform random
  distribution between -10 and 10.
  \item \code{"lvrandom"}. Coordinates assigned using a Gaussian
  distribution with standard deviation 1e-4, as used in LargeVis
  (Tang et al., 2016) and t-SNE.
  \item \code{"laplacian"}. Spectral embedding using the Laplacian Eigenmap
  (Belkin and Niyogi, 2002).
  \item \code{"pca"}. The first two principal components from PCA of
  \code{X} if \code{X} is a data frame, and from a 2-dimensional classical
  MDS if \code{X} is of class \code{"dist"}.
  \item \code{"spca"}. Like \code{"pca"}, but each dimension is then scaled
  so the standard deviation is 1e-4, to give a distribution similar to
  that used in t-SNE.
  \item A matrix of initial coordinates.
}}

\item{set_op_mix_ratio}{Interpolate between (fuzzy) union and intersection as
the set operation used to combine local fuzzy simplicial sets to obtain a
global fuzzy simplicial sets. Both fuzzy set operations use the product
t-norm. The value of this parameter should be between \code{0.0} and
\code{1.0}; a value of \code{1.0} will use a pure fuzzy union, while
\code{0.0} will use a pure fuzzy intersection.}

\item{local_connectivity}{The local connectivity required -- i.e. the number
of nearest neighbors that should be assumed to be connected at a local
level. The higher this value the more connected the manifold becomes
locally. In practice this should be not more than the local intrinsic
dimension of the manifold.}

\item{bandwidth}{The effective bandwidth of the kernel if we view the
algorithm as similar to Laplacian eigenmaps. Larger values induce more
connectivity and a more global view of the data, smaller values concentrate
more locally.}

\item{gamma}{Weighting applied to negative samples in low dimensional embedding
optimization. Values higher than one will result in greater weight
being given to negative samples.}

\item{negative_sample_rate}{The number of negative edge/1-simplex samples to
use per positive edge/1-simplex sample in optimizing the low dimensional
embedding.}

\item{nn_method}{Method for finding nearest neighbors. Options are:
\itemize{
  \item \code{"fnn"}. Use exact nearest neighbors via the
    \href{https://cran.r-project.org/package=FNN}{FNN} package.
  \item \code{"annoy"} Use approximate nearest neighbors via the
    \href{https://cran.r-project.org/package=RcppAnnoy}{RcppAnnoy} package.
 }
By default, if \code{X} has less than 4,096 vertices, the exact nearest
neighbors are found. Otherwise, approximate nearest neighbors are used.
You may also pass precalculated nearest neighbor data to this argument. It
must be a list consisting of two elements:
\itemize{
  \item \code{"idx"}. A \code{n_vertices x n_neighbors} matrix
  containing the integer indexes of the nearest neighbors in \code{X}. Each
  vertex is considered to be its own nearest neighbor, i.e.
  \code{idx[, 1] == 1:n_vertices}.
  \item \code{"dist"}. A \code{n_vertices x n_neighbors} matrix
  containing the distances of the nearest neighbors.
}
The \code{n_neighbors} parameter is ignored when using precalculated
nearest neighbor data.}

\item{n_trees}{Number of trees to build when constructing the nearest
neighbor index. The more trees specified, the larger the index, but the
better the results. With \code{search_k}, determines the accuracy of the
Annoy nearest neighbor search. Only used if the \code{nn_method} is
\code{"annoy"}. Sensible values are between \code{10} to \code{100}.}

\item{search_k}{Number of nodes to search during the neighbor retrieval. The
larger k, the more the accurate results, but the longer the search takes.
With \code{n_trees}, determines the accuracy of the Annoy nearest neighbor
search. Only used if the \code{nn_method} is \code{"annoy"}.}

\item{n_threads}{Number of threads to use. Default is half that recommended
by RcppParallel. For nearest neighbor search, only applies if
\code{nn_method = "annoy"}.}

\item{grain_size}{Minimum batch size for multithreading. If the number of
items to process in a thread falls below this number, then no threads will
be used. Used in conjunction with \code{n_threads}.}

\item{y}{Optional target array for supervised dimension reduction. The
following types are allowed:
\itemize{
  \item A factor vector with the same length as \code{X}. \code{NA} is
  allowed for any observation with an unknown level, in which case
  UMAP operates as a form of semi-supervised learning.
  \item A numeric vector with the same length as \code{X}. \code{NA} is
  \emph{not} allowed in this case. Use the parameter
  \code{target_n_neighbors} to set the number of neighbors used with
  \code{y}. If unset, \code{n_neighbors} is used.
  \item A list of two matrices, \code{idx} and \code{dist}, representing
  precalculated nearest neighbor indices and distances, respectively. This
  is the same format as that expected for precalculated data in
  \code{nn_method}. This format assumes that the underlying data was a
  numeric vector. Any user-supplied value of the \code{target_n_neighbors}
  parameter is ignored in this case, because the the number of columns in
  the matrices is used for the value. Using precalculated nearest neighbor
  data for \code{y} may be useful if the Euclidean distances metric isn't
  appropriate, or you have unlabelled data that can be accounted for in
  some other way via nearest neighbors.
}}

\item{target_n_neighbors}{Number of nearest neighbors to use to construct the
target simplicial set. Default value is \code{n_neighbors}. Applies only if
\code{y} is non-\code{NULL} and \code{numeric}.}

\item{target_weight}{Weighting factor between data topology and target
topology. A value of 0.0 weights entirely on data, a value of 1.0 weights
entirely on target. The default of 0.5 balances the weighting equally
between data and target. Only applies if \code{y} is non-\code{NULL}.}

\item{ret_model}{If \code{TRUE}, then return extra data that can be used to
add new data to an existing embedding via \code{\link{umap_transform}}. The
embedded coordinates are returned as the list item \code{embedding}. If
\code{FALSE}, just return the coordinates. This parameter can be used in
conjunction with \code{ret_nn}.}

\item{ret_nn}{If \code{TRUE}, then in addition to the embedding, also return
nearest neighbor data that can be used as input to \code{nn_method} to
avoid the overhead of repeatedly calculating the nearest neighbors when
manipulating unrelated parameters (e.g. \code{min_dist}, \code{n_epochs},
\code{init}). See the "Value" section for the names of the list items. If
\code{FALSE}, just return the coordinates. Note that the nearest neighbors
could be sensitive to data scaling, so be wary of reusing nearest neighbor
data if modifying the \code{scale} parameter. This parameter can be used in
conjunction with \code{ret_model}.}

\item{verbose}{If \code{TRUE}, log details to the console.}
}
\value{
A matrix of optimized coordinates, or:
  \itemize{
    \item if \code{ret_model = TRUE}, returns a
    list containing extra information that can be used to add new data to an
    existing embedding via \code{\link{umap_transform}}. In this case, the
    coordinates are available in the list item \code{embedding}.
    \item if \code{ret_nn = TRUE}, returns the nearest neigbor data as a
    list containing a matrix \code{idx} with the integer ids of the
    neighbors; and a matrix \code{dist} with the distances. This list can be
    used as input to the \code{nn_method} parameter.
  }
  Both \code{ret_model} and \code{ret_nn} can be \code{TRUE}, in which case
  the returned list contains the combined data.
}
\description{
A faster (but less flexible) version of the UMAP gradient. FOr more detail on
UMAP, see the  \code{\link{umap}} function.
}
\details{
By setting the UMAP curve parameters \code{a} and \code{b} to \code{1}, you
get back the Cauchy distribution as used in t-SNE and LargeVis. It also
results in a substantially simplified gradient expression. This can give
a speed improvement of around 50\%.
}
